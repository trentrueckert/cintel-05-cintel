[{"name": "app.py", "content": "# --------------------------------------------\n# Imports - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\n# From shiny, import just reactive and render\nfrom shiny import reactive, render\n\n# From shiny.express, import just ui and inputs \nfrom shiny.express import input, ui\n\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\n\n# https://fontawesome.com/v4/cheatsheet/\nfrom faicons import icon_svg\n\nUPDATE_INTERVAL_SECS: int = 3\n\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic\n    temp_celsius = round(random.uniform(-18, -16), 1)\n    temp_fahrenheit = round((temp_celsius * 9/5) + 32, 1) # Convert to Fahrenheit\n    temp_kelvin = round(temp_celsius + 273.15, 1) # Convert to Kelvin\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    new_dictionary_entry = {\n        \"temp_celsius\": temp_celsius,\n        \"temp_fahrenheit\": temp_fahrenheit,\n        \"temp_kelvin\": temp_kelvin,\n        \"timestamp\": timestamp\n    }\n\n    # get the deque and append the new entry\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n\n    # Get a snapshot of the current deque for any further processing\n    deque_snapshot = reactive_value_wrapper.get()\n\n    # For Display: Convert deque to DataFrame for display\n    df = pd.DataFrame(deque_snapshot)\n\n    # For Display: Get the latest dictionary entry\n    latest_dictionary_entry = new_dictionary_entry\n\n    # Return a tuple with everything we need\n    return deque_snapshot, df, latest_dictionary_entry\n\n\n# Define the Shiny UI Page layout\nui.page_opts(title=\"PyShiny Express: Live Data Example\", fillable=True)\n\n# Define the sidebar\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n\n    # Use input_radio_buttons for temperature unit selection, adding Kelvin as an option\n    ui.input_radio_buttons(\"temp_unit\", \n                            label=\"Choose temperature unit\", \n                            choices=[\"Celsius\", \"Fahrenheit\", \"Kelvin\"], \n                            selected=\"Celsius\")\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\n# Main content\n\nwith ui.navset_card_tab(id=\"tab\"):\n    with ui.nav_panel(\"Live Data\"):\n        with ui.value_box(\n            showcase=icon_svg(\"thermometer\"),\n            theme=\"bg-gradient-blue-purple\"\n        ): \n            \"Current Temperature\"\n\n            @render.text\n            def display_temp():\n                \"\"\"Get the latest reading and return temperature in Celsius, Fahrenheit, and Kelvin with dynamic message\"\"\"\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n                # Get the selected temperature unit\n                selected_unit = input.temp_unit()\n\n                # Fetch the temperature in each unit\n                celsius = latest_dictionary_entry['temp_celsius']\n                fahrenheit = latest_dictionary_entry['temp_fahrenheit']\n                kelvin = latest_dictionary_entry['temp_kelvin']\n\n                # Logic to display the selected temperature unit\n                if selected_unit == \"Celsius\":\n                    temp_value = celsius\n                    unit = \"\u00b0C\"\n                elif selected_unit == \"Fahrenheit\":\n                    temp_value = fahrenheit\n                    unit = \"\u00b0F\"\n                else:  # \"Kelvin\"\n                    temp_value = kelvin\n                    unit = \"K\"\n\n                # Define the threshold temperature in Celsius (e.g., -17\u00b0C is the threshold for \"warmer\")\n                threshold = -17\n    \n                # Determine if the temperature is warmer than usual\n                if celsius > threshold:\n                    temp_message = \"It is warmer than usual\"\n                else:\n                    temp_message = \"It is colder than usual\"\n\n                # Return the formatted temperature display\n                return f\"{temp_value}{unit}. {temp_message}\"\n\n\n        with ui.value_box( \n            theme=\"bg-gradient-red-orange\"\n        ):\n            \"Current Date and Time\"\n\n            @render.text\n            def display_time():\n                \"\"\"Get the latest reading and return a timestamp string\"\"\"\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                return f\"{latest_dictionary_entry['timestamp']}\"\n\n        with ui.card(width=\"48%\", height=500):\n            ui.card_header(\"Most Recent Readings\")\n\n            @render.data_frame\n            def display_df():\n                \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n                deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n                pd.set_option('display.width', None)        # Use maximum width\n\n                # Add the temperature columns\n                df['temp_fahrenheit'] = df['temp_celsius'] * 9 / 5 + 32\n                df['temp_kelvin'] = df['temp_celsius'] + 273.15\n\n                # Round the values\n                df['temp_celsius'] = df['temp_celsius'].round(1)\n                df['temp_fahrenheit'] = df['temp_fahrenheit'].round(1)\n                df['temp_kelvin'] = df['temp_kelvin'].round(1)\n\n                return render.DataGrid(df,width=\"100%\")\n\n    with ui.nav_panel(\"Temperature Readings Plot\")\n        @render_plotly\n        def display_plot():\n            # Fetch from the reactive calc function\n            deque_snapshot, df, latest_dictionary_entry = reactive_calc_combined()\n\n            # Ensure the DataFrame is not empty before plotting\n            if not df.empty:\n                # Convert the 'timestamp' column to datetime for better plotting\n                df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n        \n                fig = px.scatter(df,\n                x=\"timestamp\",\n                y=\"temp_celsius\",\n                title=\"Temperature Readings with Regression Line\",\n                height = 500,\n                labels={\"temp_celsius\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n                color_discrete_sequence=[\"blue\"] )\n\n                # For x let's generate a sequence of integers from 0 to len(df)\n                sequence = range(len(df))\n                x_vals = list(sequence)\n                y_vals = df[\"temp_celsius\"]\n\n                slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, y_vals)\n                df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n                # Add the regression line to the figure\n                fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line')\n\n                # Update layout as needed to customize further\n                fig.update_layout(title=\"Temperature Readings with Regression Line\",\n                                  xaxis_title=\"Time\", \n                                  yaxis_title=\"Temperature (\u00b0C, \u00b0F, K)\",\n                                  height=500,  # Fixed height for the plot\n                                  )\n\n            return fig", "type": "text"}]