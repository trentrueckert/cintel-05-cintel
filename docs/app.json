[{"name": "app.py", "content": "# --------------------------------------------\n# Imports at the top - PyShiny EXPRESS VERSION\n# --------------------------------------------\n\nfrom shiny import reactive, render\n\nfrom shiny.express import ui\n\n# Imports from Python Standard Library to simulate live data\nimport random\nfrom datetime import datetime\n\n# --------------------------------------------\n# Optional: Import font awesome icons as you like\n# --------------------------------------------\n\nfrom faicons import icon_svg\n\n# --------------------------------------------\n# SET UP THE REACTIVE CONTENT\n# --------------------------------------------\n\n# --------------------------------------------\n# First, set a constant UPDATE INTERVAL for all live data\n# Constants are usually defined in uppercase letters\n# Use a type hint to make it clear that it's an integer (: int)\n# --------------------------------------------\nUPDATE_INTERVAL_SECS: int = 1\n# --------------------------------------------\n\n@reactive.calc()\ndef reactive_calc_combined():\n\n    # Invalidate this calculation every UPDATE_INTERVAL_SECS to trigger updates\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    # Data generation logic. Get random between -18 and -16 C, rounded to 1 decimal place\n    temp = round(random.uniform(-18, -16), 1)\n\n    # Get a timestamp for \"now\" and use string format strftime() method to format it\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    latest_dictionary_entry = {\"temp\": temp, \"timestamp\": timestamp}\n\n    # Return everything we need\n    return latest_dictionary_entry\n\nui.page_opts(title=\"PyShiny Express: Live Data (Basic)\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n\nui.h2(\"Current Temperature\")\n\n@render.text\ndef display_temp():\n    \"\"\"Get the latest reading and return a temperature string\"\"\"\n    latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['temp']} C\"\n\nui.p(\"warmer than usual\")\n\nicon_svg(\"thermometer\")\n\nui.hr()\n\nui.h2(\"Current Date and Time\")\n\n@render.text\ndef display_time():\n    \"\"\"Get the latest reading and return a timestamp string\"\"\"\n    latest_dictionary_entry = reactive_calc_combined()\n    return f\"{latest_dictionary_entry['timestamp']}\"\n", "type": "text"}]